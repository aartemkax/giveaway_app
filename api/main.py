from dotenv import load_dotenv
load_dotenv()
import os
import time
import json
import base64
import requests

from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
from instagrapi import Client

app = Flask(__name__, static_folder='static')
CORS(app)

# ‚Üê –∑—á–∏—Ç—É—î–º–æ –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
USERNAME     = os.getenv("IG_USERNAME")
PASSWORD     = os.getenv("IG_PASSWORD")
API_BASE_URL = os.getenv("API_BASE_URL")
# –ø—ñ–¥ —à–ª—è—Ö –¥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É —Å–µ—Å—ñ—ó (—è–∫—â–æ –∑–∞—Ö–æ—á–µ—Ç–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ñ–∞–π–ª)
SESSION_FILE = os.path.join("api", "session.json")
AVATAR_DIR   = os.path.join(app.static_folder, "avatars")

# üîß –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—è, —â–æ –∫–∞—Ç–∞–ª–æ–≥ –∞–≤–∞—Ç–∞—Ä—ñ–≤ —ñ—Å–Ω—É—î
if not os.path.isdir(AVATAR_DIR):
    os.makedirs(AVATAR_DIR, exist_ok=True)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–ª—ñ—î–Ω—Ç Instagrapi (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏ –∑ –ø—Ä–æ–∫—Å—ñ)
proxy_url = os.getenv("PROXY_URL")
cl = Client(proxy=proxy_url)

# –°–ø—Ä–æ–±–∞ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Å–µ—Å—ñ—é –∑ ENV –∑–º—ñ–Ω–Ω–æ—ó SESSION_JSON_B64
session_b64 = os.getenv("SESSION_JSON_B64")
if session_b64:
    raw = base64.b64decode(session_b64)
    settings = json.loads(raw)
    cl.set_settings(settings)
    print("‚úÖ Session restored from ENV")
elif os.path.exists(SESSION_FILE):
    cl.load_settings(SESSION_FILE)
    print("‚úÖ Session loaded from file")
else:
    print("üîµ No session found ‚Äî logging in")
    cl.login(USERNAME, PASSWORD)
    # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞ –¥–∏—Å–∫ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É
    cl.dump_settings(SESSION_FILE)

@app.route("/")
def index():
    return "üéØ API –ø—Ä–∞—Ü—é—î! –ì–æ—Ç–æ–≤–∏–π –ø—Ä–∏–π–º–∞—Ç–∏ –∑–∞–ø–∏—Ç–∏."

# –ù–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—ñ–¥–¥–∞—á—ñ –∞–≤–∞—Ç–∞—Ä–æ–∫
@app.route("/api/avatar/<username>")
def serve_avatar(username):
    filename = f"{username}.jpg"
    file_path = os.path.join(AVATAR_DIR, filename)

    if os.path.exists(file_path):
        return send_from_directory(AVATAR_DIR, filename)
    else:
        return jsonify({"error": "Avatar not found"}), 404

# –û—Å–Ω–æ–≤–Ω–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫—ñ–≤
@app.route("/api/fetch_participants", methods=["POST"])
def fetch_participants():
    data = request.get_json() or {}
    post_url = data.get("post_url")

    if not post_url:
        return jsonify({"error": "–ù–µ –≤–∫–∞–∑–∞–Ω–æ post_url"}), 400

    try:
        media_id = cl.media_pk_from_url(post_url)
        comments = cl.media_comments(media_id, amount=0)

        participants = []
        seen = set()

        for comment in comments:
            username = comment.user.username
            if username in seen:
                continue
            seen.add(username)

            avatar_url = comment.user.profile_pic_url
            avatar_path = os.path.join(AVATAR_DIR, f"{username}.jpg")
            local_url = f"/api/avatar/{username}?t={int(time.time())}"

            # —è–∫—â–æ —Ñ–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏
            if os.path.exists(avatar_path) and os.path.getsize(avatar_path) == 0:
                os.remove(avatar_path)

            # –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏, —è–∫—â–æ –Ω–µ–º–∞
            if not os.path.exists(avatar_path):
                try:
                    resp = requests.get(avatar_url, timeout=5)
                    if resp.status_code == 200:
                        with open(avatar_path, 'wb') as f:
                            f.write(resp.content)
                        print(f"üíæ Saved avatar for @{username}")
                    else:
                        print(f"‚ö†Ô∏è Error downloading avatar: {{resp.status_code}}")
                        local_url = "https://i.imgur.com/QCNbOAo.png"
                except Exception as e:
                    print(f"‚ùå Download error: {{e}}")
                    local_url = "https://i.imgur.com/QCNbOAo.png"

            participants.append({
                "username": username,
                "profile_pic_url": local_url
            })

        return jsonify({"participants": participants})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=True)
